var PICS;PICS=angular.module("pics",["ngRoute"],["$locationProvider","$routeProvider",function(a,b){return b.when("/",{templateUrl:"dashboard/dashboard.html",controller:"DashboardController"}).when("/technology",{templateUrl:"technology/technology.html",controller:"TechnologyController"}).when("/file-structure",{templateUrl:"file-structure/file-structure.html",controller:"FileStructureController"}).when("/routing",{templateUrl:"routing/routing.html",controller:"RoutingController"}).when("/html",{templateUrl:"html/html.html",controller:"HtmlController"}).when("/decorators",{templateUrl:"decorator/decorator.html",controller:"DecoratorController"}).when("/conventions-and-standards/css-javascript",{templateUrl:"convention-standard/css-javascript.html",controller:"ConventionStandardController"}).when("/conventions-and-standards/html",{templateUrl:"convention-standard/html.html",controller:"ConventionStandardController"}).when("/conventions-and-standards/file-structure",{templateUrl:"convention-standard/file-structure.html",controller:"ConventionStandardController"}).when("/style-guide",{templateUrl:"style-guide/style-guide.html",controller:"StyleGuideController"}).when("/page-layout",{templateUrl:"page-layout/page-layout.html",controller:"PageLayoutController"}).otherwise({redirectTo:"/"})}]),$(document).foundation(),PICS.controller("ConventionStandardController",["$scope",function(){}]),PICS.controller("DashboardController",["$scope",function(){}]),PICS.controller("DecoratorController",["$scope",function(){}]),PICS.controller("FileStructureController",["$scope",function(){}]),PICS.controller("HtmlController",["$scope",function(){}]),PICS.controller("FooterController",["$scope",function(){}]),PICS.controller("HeaderController",["$scope",function(){}]),PICS.controller("PageLayoutController",["$scope",function(){}]),PICS.controller("RoutingController",["$scope",function(){}]),PICS.controller("StyleGuideController",["$scope",function(){}]),PICS.controller("TechnologyController",["$scope",function(){}]),angular.module("pics").run(["$templateCache",function(a){"use strict";a.put("convention-standard/css-javascript.html",'<div class="row"><div class="columns"><section id="css"><h1>CSS</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><h4>ID Requirements:</h4><ul><li>Lower case</li><li>Words are separated by "_" (underscore)</li><li>[a-z0-9]+</li></ul><div class="example"><pre class="prettyprint linenums">&lt;div id="app_property_list"&gt;&lt;/div&gt;\n&lt;div id="environment"&gt;&lt;/div&gt;\n&lt;form id="login_form"&gt;&lt;/form&gt;\n</pre></div><h4>Class Requirements:</h4><ul><li>Lower case</li><li>Words are separated by "-" (hyphen)</li><li>[a-z0-9]+</li></ul><div class="example"><pre class="prettyprint linenums">&lt;div class="page-header"&gt;&lt;/div&gt;\n&lt;pre class="lang-sh"&gt;&lt;/pre&gt;\n&lt;ul class="nav nav-list"&gt;&lt;/ul&gt;\n</pre></div></section><section id="javascript"><h1>Javascript</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><h4>Variable Requirements:</h4><ul><li>Lower case</li><li>Words are separated by "_" (underscore)</li><li>Noun</li><li>Begins with a letter</li><li>[a-z][a-z0-9]+</li></ul><div class="example"><pre class="prettyprint linenums">var my_variable = true,\n    that = this,\n    undefined = true;\n    </pre></div><h4>Function Requirements:</h4><ul><li>Camel Case</li><li>Verb</li><li>Begins with lower case letter</li><li>Letters only</li></ul><div class="example"><pre class="prettyprint linenums">function getBread() {\n    return "loaf";\n}\n\nvar Person = {\n    getName: function () {\n        return \'Jeevez\';\n    }\n};\n\n// self executing anonymouse function\n(function () {\n    alert(\'hello\');\n}());\n</pre></div><h4>Class Requirements:</h4><ul><li>Camel case</li><li>Noun</li><li>Begins with capital letter</li><li>Letters only</li></ul><div class="example"><pre class="prettyprint linenums">var person = Object.create({\n    getAge: function () {},\n    getFirstName: function () {},\n    getFullName: function () {},\n    getLastName: function () {}\n});\n\nfunction Car() {\n    this.doors = \'\',\n    this.model = \'\',\n    this.year = \'\';\n}\n\nvar car = new Car();</pre></div></section></div></div>'),a.put("convention-standard/file-structure.html",'<div class="row"><div class="columns"><section id="folders"><h1>Folders</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>It is very important that a user gains context by folder structure.  Structuring and organizing files is just as important as structuring and organizing code.  Nest folders when appropriate and make sure you are not forking the project internally by creating multiple directories to achieve similar purpose <strong>(e.g. i18n and translation)</strong>.</p><h4>Requirements:</h4><ul><li>Lower case</li><li>Words separated by "-" (hyphen)</li><li>Singular</li><li>English (removing vagueness)</li><li>English sounding</li></ul><div class="example"><p><strong>Good example:</strong></p><pre class="prettyprint linenums">/struts/app-translation\n/struts/contractor\n/struts/contractor/trade\n/struts/contractor/registration\n/struts/frontend-development-guide\n/struts/layout\n</pre><p><strong>Bad Example:</strong></p><pre class="prettyprint linenums"># not separated by "-"\n/struts/app_property\n\n# not lower case, not separated by "-"\n/struts/CustomerService\n\n# vague\n/struts/gc\n/struts/misc\n\n# plural\n/struts/reports\n</pre></div></section><section id="templates"><h1>Templates</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>These naming conventions should apply to all HTML, CSS and Javascript files.  These files come under the <code>struts</code>, <code>css</code> and <code>js</code> directories respectively.</p><h4>Requirements:</h4><ul><li>Organized under correct folder</li><li>Lower case</li><li>Words separated by "-" (hyphen)</li><li>English (remove vagueness)</li><li>English sounding</li></ul><h2>Views</h2><div class="example"><p><strong>Good example:</strong></p><pre class="prettyprint linenums"># lower case\n/struts/frontend-development-guide/file-structure.jsp\n\n# separated by "-", english sounding\n/struts/report/manage-report/favorites-list.jsp\n/struts/report/manage-report/my-reports-list.jsp\n</pre><p><strong>Bad Example:</strong></p><pre class="prettyprint linenums"># not separated by "-"\n/struts/confirmaudit.jsp\n\n# not lower case, not separated by "-"\n/struts/jQuerySample.jsp\n\n# not properly organized, not separated by "-"\n/struts/login_ajax.jsp\n\n# not properly organized, not separated by "-", vague, not english sounding\n/struts/misc/ambest_suggest.jsp\n/struts/misc/conop_flag_diff.jsp\n</pre></div><hr/><h2>Partials</h2><h4>Additional Requirements:</h4><ul><li>Prefixed by "_" (underscore)</li></ul><div class="example"><p><strong>Good example:</strong></p><pre class="prettyprint linenums"># organized, lowercase, separated by "-", prefixed with "_", english sounding\n/struts/frontend-development-guide/_menu.jsp\n/struts/layout/_environment.jsp\n/struts/layout/menu/_menu.jsp\n/struts/layout/_page-header.jsp\n</pre><p><strong>Bad Example:</strong></p><pre class="prettyprint linenums"># not organized, not prefixed with "_", shouldn\'t even exist â€” what is it for?\n/struts/jquery.jsp\n\n# not lower case\n/struts/contrators/_contractorFlagAllFlags.jsp\n\n# not prefixed with "_"\n/struts/layout/chat.jsp\n\n# not prefixed with "_", not separated with "-", bad practice\n/struts/layout/include_javascript.jsp</pre></div></section></div></div>'),a.put("convention-standard/html.html",'<div class="row"><div class="columns"><section id="html"><h1>HTML</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>HTML is XML. Organization and maintenance of HTML is just as important as any other code.  HTML is the language we use to tell the computer what type of content we are trying to convey and we do so by writing semantic markup. Semantic markup allows us to describe our content, to the computer, through a list of comprehensive tags.</p><p>Writing clean and elegant HTML is not as easy as it seems, but is not an impossible task either. The goal is to approach HTML in two easy steps:</p><ol><li>Use semantic tags to describe the content you want to display.</li><li>Modify or wrap the content with additional containers to be appropriate for the design.</li></ol></section><section id="struts"><h1>Struts 2.x</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>HTML is hard enough to read. Don\'t make it any harder than it already is!</p><div class="example"><p><strong>Good example:</strong></p><pre class="prettyprint linenums">&lt;!-- Clear, Maintainable, Elegant --&gt;\n&lt;s:url value="http://www.mapquest.com/maps/map.adp" var="mapquest_url"&gt;\n    &lt;s:param name="country"&gt;${contractor.country.isoCode}&lt;/s:param&gt;\n    &lt;s:param name="city"&gt;${contractor.city}&lt;/s:param&gt;\n    &lt;s:param name="state"&gt;${contractor.state}&lt;/s:param&gt;\n    &lt;s:param name="address"&gt;${contractor.address}&lt;/s:param&gt;\n    &lt;s:param name="zip"&gt;${contractor.zip}&lt;/s:param&gt;\n    &lt;s:param name="zoom"&gt;5&lt;/s:param&gt;\n&lt;/s:url&gt;\n\n&lt;a href="${mapquest_url}" target="_blank"&gt;${ContractorView.ShowMap}&lt;/a&gt;\n</pre><p><strong>Bad Example:</strong></p><pre class="prettyprint linenums">&lt;!-- 300 characters too long --&gt;\n&lt;a href="http://www.mapquest.com/maps/map.adp?country=&lt;s:property value="contractor.country.isoCode" /&gt;&city=&lt;s:property value="contractor.city" /&gt;&state=&lt;s:property value="contractor.state" /&gt;&address=&lt;s:property value="contractor.address" /&gt;&zip=&lt;s:property value="contractor.zip" /&gt;&zoom=5" target="_blank"&gt;&lt;s:text name="ContractorView.ShowMap" /&gt;&lt;/a&gt;\n</pre></div><div class="example"><p><strong>Good example:</strong></p><pre class="prettyprint linenums">&lt;!-- Clear, Maintainable, Elegant --&gt;\n&lt;s:url action="OperatorConfiguration" var="operator_url"&gt;\n    &lt;s:param name="id" value="get(\'opID\')" /&gt;\n&lt;/s:url&gt;\n\n&lt;s:if test="get(\'operatorStatus\')"&gt;\n    &lt;s:set var="account_class"&gt;account-status&lt;/s:set&gt;\n&lt;/s:if&gt;\n&lt;s:else&gt;\n    &lt;s:set var="account_class" value="\'\'" /&gt;\n&lt;/s:else&gt;\n\n&lt;a href="${operator_url}" class="${account_class}"&gt;&lt;s:property value="get(\'operator\')"/&gt;&lt;/a&gt;\n</pre></div><p><strong>Bad Example:</strong></p><pre class="prettyprint linenums">&lt;!-- No --&gt;\n&lt;a href="OperatorConfiguration.action?id=&lt;s:property value="get(\'opID\')"/&gt;" class="account&lt;s:property value="get(\'operatorStatus\')"/&gt;"&gt;&lt;s:property value="get(\'operator\')"/&gt;&lt;/a&gt;\n</pre><div class="example"><p><strong>Bad Example:</strong></p><pre class="prettyprint linenums">&lt;!-- I am just going to walk away from you --&gt;\n&lt;s:if test="filter.showType"&gt;\n    &lt;div class="filterOption"&gt;&lt;a href="#"\n        onclick="toggleBox(\'form1_type\'); return false;"&gt;&lt;s:text name="global.Type" /&gt;&lt;/a&gt; = &lt;span\n        id="form1_type_query"&gt;&lt;s:text name="JS.Filters.status.All" /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id="form1_type_select"\n        style="display: none" class="clearLink"&gt;&lt;s:select\n        list="filter.typeList" multiple="true" cssClass="forms"\n        name="filter.type" id="form1_type" /&gt;&lt;br /&gt;\n    &lt;a class="clearLink" href="#"\n        onclick="clearSelected(\'form1_type\'); return false;"&gt;&lt;s:text name="Filters.status.Clear" /&gt;&lt;/a&gt; &lt;/span&gt;&lt;/div&gt;\n&lt;/s:if&gt;</pre></div></section></div></div>'),a.put("dashboard/dashboard.html","dashboard.jade"),a.put("decorator/decorator.html",'<div class="row"><div class="columns"><section id="overview"><h1>Overview</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p><code>Decorator templates</code> "decorate" JavaServer Pages or jsp\'s. <code>Decorators</code> are selected after executing a Controller, but before outputing content to the output buffer. <code>Decorator</code> files include elements that are typically shared between multiple templates.  These shared items include <code>&lt;html&gt;</code>, <code>&lt;body&gt;</code>, <code>&lt;link&gt;</code> and <code>&lt;script&gt;</code> tags.</p><p><code>Decorators</code> control the over arching page layout and are typically responsible for including general components such as: header, primary navigation, breadcrumbs, sidebar, footer, etc.  It is also responsible for determining the number of columns in a page (e.g. Is this page a one, two or three column layout).  The control over which <code>decorator file</code> a particular jsp uses is controlled by decorators.xml.</p><p>The two layouts that should be used for all new styles should be:</p><ul><li>layout.jsp</li><li>simple-layout.jsp</li></ul><p><strong>Since these files are used by every template, or jsp, no one is allowed to modify this file without prior authorization.</strong></p><div class="example"><pre class="prettyprint linenums">&lt;!DOCTYPE html&gt;\n&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;\n&lt;!--[if gt IE 8]&gt;&lt;!--&gt; &lt;html class="no-js"&gt; &lt;!--&lt;![endif]--&gt;\n    &lt;head&gt;\n        &lt;meta charset="utf-8"&gt;\n        &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"&gt;\n        &lt;title&gt;PICS - &lt;decorator:title default="PICS" /&gt;&lt;/title&gt;\n        ...\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id="main" role="main" class="container"&gt;\n            &lt;decorator:body /&gt;\n        &lt;/div&gt;\n        ...\n    &lt;/body&gt;\n    ...</pre></div></section></div></div>'),a.put("file-structure/file-structure.html",'<div class="row"><div class="columns"><section id="folders"><h1>Folders</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>Folders are an important part for understanding application architecture.  Folders help provide organizational clarity.  Some Folder structures can even hint / indicate a Web Framework, Technology or implementation strategy.</p><div class="example"><pre class="prettyprint linenums"># java files (controllers, models)\n/Java Resources/src\n\n# decorator files\n/WebContent/decorators\n\n# jsp files (templates)\n/WebContent/struts\n\n# images\n/WebContent/img\n\n# js\n/WebContent/js\n\n# css\n/WebContent/css\n\n# sass\n/WebContent/sass\n</pre></div></section><section id="files"><h1>Files</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>There are some key files that control the application\'s configuration. It is crucial that you understand what they are for and how they effect your development.</p><div class="example"><pre class="prettyprint linenums"># application descriptor/core\nweb.xml\n\n# application configurations\nstruts-default.xml\n\n# plugins\nstruts-plugins.xml\n\n# application configuration overrides\nstruts.properties\n\n# decorator intercepter\nsitemesh.xml\n\n# database connection\nserver.xml\n\n# routing file\nstruts.xml\n\n# decorator file\ndecorators.xml\n</pre></div></section><section id="css"><h1>CSS</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>CSS is used to style the markup or HTML that is generated by <code>View Templates</code> and <code>Partial Templates</code>.  <strong>It is important to note that we do not write CSS in our application, instead we write SASS (Using Compass).</strong></p><div class="example"><pre class="prettyprint linenums"># font-awesome and textual based icons\n/css/font\n\n# files that are created by 3rd party companies, such as twitter bootstrap and font awesome.\n/css/vendor/*\n\n# a compiled version of the applications custom styles\n/css/pics.css\n\n# a compile version of the applications styles\n/css/style.css\n</pre></div></section><section id="javascript"><h1>Javascript</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>Javascript is used to unobtrusively add sophisticated functionality to our HTML.  Javascript should not control page layout or styles.  Those jobs are better suited for Templates and CSS.  Javascript can and should be used for adding interaction to a web application or to fetch "extra" data asynchronously.</p><div class="example"><pre class="prettyprint linenums"># extjs application for dynamic reports\njs/extjs\n\n# custom application interaction\njs/pics\n\n# files that are created by 3rd party companies, such as twitter bootstrap and jquery.\njs/vendor\n\n# a compile version of the applications javascript\njs/script.js\n</pre></div></section><section id="extjs"><h1>ExtJS</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>ExtJS4 is a large <code>MV*</code> Javascript framework that is used for Dynamic Reports.  ExtJS4 works very different from the typical web stack.  It is responsible for page layout, interaction and styles, but also handles client side database storage.</p><div class="example"><pre class="prettyprint linenums"># extjs application for dynamic reports\njs/extjs/pics\n\n# extjs source files + custom compliations\njs/extjs/pics/extjs\n\n# application files\njs/extjs/pics/app\n\n# application runner\napp.js\n\n# application instructions\njs/extjs/pics/README\n\n# application deployment\napp.jsb3\nindex.html\nprod.html\n\n# application resources\njs/extjs/pics/resources</pre></div></section></div></div>'),a.put("html/html.html",'<div class="row"><div class="columns"><section id="overview"><h1>Overview</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>Creating a template or HTML file for a page is easy. It is important, however, to understand how the page you are create effects the system. When creating a template one should properly evaluate the files content and location. In addition, it is important to understand the difference between a <code>View Template</code> and a <code>Partial Template</code>.</p><p><strong>When creating a file ask yourself four questions:</strong></p><ol><li><a href="#">Is the file I am creating in the correct location?</a></li><li><a href="#">Is the file and or folder name, I am creating, following convention?</a></li><li>Do I want a <code>View Template</code> or a <code>Partial Template</code>?</li><li>Have I included the appropriate content type / taglibs?</li></ol><p><em>If you are unsure of the content type and taglibs to should be included in your HTML file, include the code below:</em></p><div class="example"><p><strong>With comments</strong></p><pre class="prettyprint linenums">&lt;!-- Set the content type to UTF-8 to enable international charset --&gt;\n&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %&gt;\n\n&lt;!-- Include struts tags --&gt;\n&lt;%@ taglib prefix="s" uri="/struts-tags" %&gt;\n\n&lt;!-- Add appropriate page title --&gt;\n&lt;title&gt;{{YOUR_PAGE_TITLE}}&lt;/title&gt;\n</pre><p><strong>Without comments</strong></p><pre class="prettyprint linenums">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %&gt;\n&lt;%@ taglib prefix="s" uri="/struts-tags" %&gt;\n\n&lt;title&gt;{{YOUR_PAGE_TITLE}}&lt;/title&gt;\n</pre></div></section><section id="templates"><h1>Creating a Template</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>Template files are the views that are seen on every page. Each template file makes up the visual mark up that you want to display on a given page. The goal for creating maintainable templates is to split up the content being rendered into display logic that is brief, but comprehensive. We can achieve this goal by defining two template types where each template type will allow us to define manageable and reusable, semantic mark up.</p><p>There are two types of template files:</p><ul><li><code>View Templates</code></li><li><code>Partial Templates</code></li></ul><p><em>It is important to know that a template represents a specific page\'s content and nothing more. The menu, header, and footer, for example, should <strong>NOT</strong> be included in a template file. Items such as those should be included in a <code>Decorator</code>.</em></p><h2>Views</h2><p><code>View Templates</code> are and should be used to define the page\'s content.  It is the <code>View Template\'s</code> responsibility to organize the layout of the content within itself. Note: each <code>View Template</code> may be composed of multiple <code>Partial Templates</code>.</p><div class="example"><p><strong>/WebContent/struts/hit/hit-list.jsp</strong></p><pre class="prettyprint linenums">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %&gt;\n&lt;%@ taglib prefix="s" uri="/struts-tags" %&gt;\n\n&lt;!-- Browser tab will display "PICS - My Example Page" --&gt;\n&lt;title&gt;My Hit List&lt;/title&gt;\n\n&lt;!-- Add "My Hit List" page header --&gt;\n&lt;s:include value="/struts/layout/_page-header.jsp"&gt;\n    &lt;s:param name="title"&gt;My Hit List&lt;/s:param&gt;\n&lt;/s:include&gt;\n\n&lt;ul&gt;\n    &lt;!-- Display a list of hits --&gt;\n    &lt;s:iterator value="hitList" var="hit"&gt;\n        &lt;li&gt;\n            &lt;s:include value="/struts/hit/_hit.jsp" /&gt;\n                &lt;s:param name="honorific"&gt;${hit.honorific}&lt;/s:param&gt;\n                &lt;s:param name="name"&gt;${hit.name}&lt;/s:param&gt;\n                &lt;s:param name="is_alive"&gt;${hit.alive}&lt;/s:param&gt;\n            &lt;/s:include&gt;\n        &lt;/li&gt;\n    &lt;/s:iterator&gt;\n&lt;/ul&gt;\n</pre></div><hr/><h2>Partials</h2><p><code>Partial Templates</code> are and should be used to define the page\'s <strong>sub-content</strong>.  Any information that will make up a portion of a <code>View Template</code>, used for ajax or is a shared among multiple <code>View Templates</code> should be a partial.</p><div class="example"><p><strong>/WebContent/struts/hit/_hit.jsp</strong></p><pre class="prettyprint linenums">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %&gt;\n&lt;%@ taglib prefix="s" uri="/struts-tags" %&gt;\n\n&lt;% if (request.getParameter("honorific") != null) { %&gt;\n    &lt;s:set name="honorific"&gt;${param.honorific}&lt;/s:set&gt;\n&lt;% } else { %&gt;\n    &lt;s:set name="honorific"&gt;Captain&lt;/s:set&gt;\n&lt;% } %&gt;\n\n&lt;% if (request.getParameter("name") != null) { %&gt;\n    &lt;s:set name="name"&gt;${param.name}&lt;/s:set&gt;\n&lt;% } else { %&gt;\n    &lt;s:set name="name"&gt;Douglas&lt;/s:set&gt;\n&lt;% } %&gt;\n\n&lt;% if (request.getParameter("is_alive") != null) { %&gt;\n    &lt;s:set name="is_alive"&gt;${param.is_alive}&lt;/s:set&gt;\n&lt;% } else { %&gt;\n    &lt;s:set name="is_alive"&gt;true&lt;/s:set&gt;\n&lt;% } %&gt;\n\n&lt;div class="hit"&gt;\n    &lt;span class="honorific"&gt;${honorific}&lt;/span&gt;\n    &lt;span class="name"&gt;${name}&lt;/span&gt;\n    &lt;span class="is-alive"&gt;\n        &lt;s:if test="is_alive == \'true\'"&gt;\n            &lt;i class="icon-ok"&gt;&lt;/i&gt;\n        &lt;/s:if&gt;\n    &lt;/span&gt;\n&lt;/div&gt;\n</pre></div></section><section id="create_variables"><h1>Creating variables in HTML</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>The most common use for needing variables in HTML is to make your life easier. Creating variables in the HTML will allow you to manipulate the values on the <code>ValueStack</code> to assist you on the presentation layer. Maybe you need to create CSS classes or display lists dependent on the parameters passed from the <code>Action Class</code>. However, you will want to understand how <code>OGNL</code> works and how, when creating variables, they will be evaluated.</p><div class="example"><p><strong>Create an object or list</strong></p><pre class="prettyprint linenums">&lt;!-- Using OGNL, the variable will be set to the value User getUser() method on the ValueStack --&gt;\n&lt;s:set var="{{YOUR_VARIABLE_NAME}}" value="user" /&gt;\n</pre><p><strong>Create an list</strong></p><pre class="prettyprint linenums">&lt;!-- Using OGNL, the variable will be set to the value List&lt;User&gt; getUserList() method on the ValueStack --&gt;\n&lt;s:set var="{{YOUR_VARIABLE_NAME}}" value="userList" /&gt;\n</pre><p><strong>Create a string from an object</strong></p><pre class="prettyprint linenums">&lt;!-- Using OGNL, the variable will be set to the value User getUser().getName() method on the ValueStack --&gt;\n&lt;s:set var="{{YOUR_VARIABLE_NAME}}" value="user.name" /&gt;\n</pre><p><strong>Create a string literal</strong></p><pre class="prettyprint linenums">&lt;!-- The variable will be evaluated and set to the String "{{YOUR_STRING}}" --&gt;\n&lt;s:set var="{{YOUR_VARIABLE_NAME}}"&gt;{{YOUR_STRING}}&lt;/s:set&gt;\n</pre><p><strong>Create an empty string</strong></p><pre class="prettyprint linenums">&lt;!-- Your variable will be set to an empty string --&gt;\n&lt;s:set var="{{YOUR_VARIABLE_NAME}}" value="%{\'\'}" /&gt;\n</pre></div></section><section id="print_variables"><h1>Printing variables in HTML</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>To dynamic display content onto a page is commonplace. However, it is important to know how that data is being generated. Malformed or unvalidated data can cause much more harm than good. The most common example of unvalidated data is script injection. This security vulnerability is important to be cognizant of. Consequently, it is a good idea to be/get familiar with the <code>JSP 2.0 Expression Language</code>.</p><div class="example"><p><strong>Accessing a name variable on the <code>ValueStack</code></strong></p><pre class="prettyprint linenums">&lt;!-- JSP 2.0 EL (Expression Language) --&gt;\n${name}\n\n&lt;!-- Struts 2 --&gt;\n&lt;s:property value="name" /&gt;\n</pre><p><strong>Accessing a name variable on an object on the <code>ValueStack</code></strong></p><pre class="prettyprint linenums">&lt;!-- JSP 2.0 EL (Expression Language) --&gt;\n${user.name}\n\n&lt;!-- Struts 2 --&gt;\n&lt;s:property value="user.name" /&gt;\n</pre><p><strong>Accessing a string literal</strong></p><pre class="prettyprint linenums">&lt;!-- JSP 2.0 EL (Expression Language) --&gt;\n${\'Did you say just "Douglas"?\'}\n\n&lt;!-- Struts 2 --&gt;\n&lt;s:property value="%{\'Did you just say \\"Douglas\\"?\'}" /&gt;\n</pre><p><strong>Accessing a translation</strong></p><pre class="prettyprint linenums">&lt;!-- JSP 2.0 EL (Expression Language) --&gt;\n&lt;s:text name="{{YOUR_TRANSLATION_KEY}}" var="translation" /&gt;\n${translation}\n\n&lt;!-- Struts 2 --&gt;\n&lt;s:text name="{{YOUR_TRANSLATION_KEY}}" /&gt;\n</pre><p><strong>Accessing a variable created by the <code>&lt;s:set var="name"&gt;Douglas&lt;/s:set&gt;</code></strong></p><pre class="prettyprint linenums">&lt;!-- JSP 2.0 EL (Expression Language) --&gt;\n${name}\n\n&lt;!-- Struts 2 --&gt;\n&lt;s:property value="#name" /&gt;\n</pre><p><strong>Accessing a variable you do NOT want to escape</strong></p><pre class="prettyprint linenums">&lt;!-- JSP 2.0 EL (Expression Language) --&gt;\n${name}\n\n&lt;!-- Struts 2 --&gt;\n&lt;s:property value="name" escape="false" /&gt;\n</pre><p><strong>Accessing a variable you want to escape</strong></p><pre class="prettyprint linenums">&lt;!-- JSP 2.0 EL (Expression Language) --&gt;\n${fn:escapeXml(???)}\n\n&lt;!-- Struts 2 --&gt;\n&lt;s:property value="name" /&gt;\n&lt;s:property value="name" escape="true" /&gt;\n</pre></div></section><section id="logic"><h1>Logic in HTML</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>Adding logic to templates should be limited. It is better if you continue to add the business logic in the backend. When it is neccessary to put logic within the templates, it should <strong>NOT</strong> be mixed with the HTML. <em>Keeping your logic separate from the HTML being rendered helps alleviate the readability issues of XML.</em> Templates become overwhelmingly difficult to maintain if you mix HTML with more XML (Struts tags).</p><div class="example"><p><strong>Good example 1</strong></p><pre class="prettyprint linenums">&lt;!-- Your logic (no html) --&gt;\n&lt;s:if test="hit.weapon == \'icepick\'"&gt;\n    &lt;s:set var="hit_image"&gt;/img/icepick.png&lt;/s:set&gt;\n&lt;/s:if&gt;\n&lt;s:elseif test="hit.weapon == \'crowbar\'"&gt;\n    &lt;s:set var="hit_image"&gt;/img/crowbar.png&lt;/s:set&gt;\n&lt;s:else&gt;\n    &lt;s:set var="hit_image"&gt;/img/banana.png&lt;/s:set&gt;\n&lt;/s:else&gt;\n\n&lt;!-- Your content (html) --&gt;\n&lt;img src="${hit_image}" /&gt;\n</pre><p><strong>Good example 2</strong></p><pre class="prettyprint linenums">&lt;ul&gt;\n    &lt;s:iterator value="hits" var="hit"&gt;\n        &lt;!-- Your logic (no html) --&gt;\n        &lt;s:if test="hit.alive == true"&gt;\n            &lt;s:set var="hit_image"&gt;/img/alive.png&lt;/s:set&gt;\n        &lt;/s:if&gt;\n        &lt;s:else&gt;\n            &lt;s:set var="hit_image"&gt;/img/dead.png&lt;/s:set&gt;\n        &lt;/s:else&gt;\n        \n        &lt;s:url action="Hit" method="profile" var="hit_url"&gt;\n            &lt;s:param name="id"&gt;${hit.id}&lt;/s:param&gt;\n        &lt;/s:url&gt;\n        \n        &lt;!-- Your content (html) --&gt;\n        &lt;a href="${hit_url}"&gt;${hit.name} is &lt;img src="${hit_image}" /&gt;&lt;/a&gt;\n    &lt;/s:iterator&gt;\n&lt;/ul&gt;\n</pre><p><strong>Bad example</strong></p><pre class="prettyprint linenums">&lt;s:url action="Hit" method="profile" var="hit_url"&gt;\n    &lt;s:param name="id"&gt;${hit.id}&lt;/s:param&gt;\n&lt;/s:url&gt;\n\n&lt;!-- Your content --&gt;\n&lt;a href="${hit_url}"&gt;\n    &lt;!-- Your logic --&gt;\n    &lt;s:if test="hit.alive == true"&gt;\n        &lt;s:set var="hit_image"&gt;/img/alive.png&lt;/s:set&gt;\n    &lt;/s:if&gt;\n    &lt;s:else&gt;\n        &lt;s:set var="hit_image"&gt;/img/dead.png&lt;/s:set&gt;\n    &lt;/s:else&gt;\n    \n    ${hit.name} is &lt;img src="${hit_image}" /&gt;\n&lt;/a&gt;\n</pre></div><p><strong><em>The only exception to this rule is when sectioning out alternative views of the same page.</em></strong></p><div class="example"><pre class="prettyprint linenums">&lt;s:if test="hits.length &gt; 0"&gt;\n    &lt;ul&gt;\n        &lt;s:iterator value="hits" var="hit"&gt;\n            &lt;li&gt;${hit.name}&lt;/li&gt;\n        &lt;/s:iterator&gt;\n    &lt;/ul&gt;\n&lt;/s:if&gt;\n&lt;s:else&gt;\n    &lt;p&gt;No Hits Found&lt;/p&gt;\n&lt;/s:else&gt;\n</pre></div></section><section id="iteration"><h1>Iterating over variables in HTML</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>Iterating over lists and maps are commonplace. Ensure you do not confuse scope by <em>SPECIFICALLY</em> specifying a new context. The new context would be accessed directly so that there is no confusion to which variable / object you are referencing. You can do this by declaring the <code>var</code> keyword in an <code>&lt;s:iterator&gt;</code> tag.</p><div class="example"><p><strong>Basic example 1</strong></p><pre class="prettyprint linenums">&lt;!-- Using OGNL, hitList will be set to the getHitList() method on the ValueStack --&gt;\n&lt;!-- The result of that method will be assigned to the hit variable --&gt;\n&lt;s:iterator value="hitList" var="hit"&gt;\n    &lt;!-- Using EL Expression Language, access getName() method on the variable #hit --&gt;\n    ${hit.name}\n&lt;/s:iterator&gt;\n</pre><p><strong>Basic example 2</strong></p><pre class="prettyprint linenums">&lt;!-- Using OGNL, hitList will be set to the getHitList() method on the ValueStack --&gt;\n&lt;!-- The result of that method will be assigned to the hits variable --&gt;\n&lt;!-- In addition, a hitStatus variable is to access IteratorStatus values (index|count|first|even|last|odd) --&gt;\n&lt;s:set var="hits" value="hitList" /&gt;\n\n&lt;s:iterator value="#hits" var="hit" status="hitStatus"&gt;\n    &lt;!-- Using EL Expression Language, access getIndex() method on the variable #hitStatus --&gt;\n    ${hitStatus.index}\n&lt;/s:iterator&gt;\n</pre><p><strong>Advanced example</strong></p><pre class="prettyprint linenums">&lt;ul id="${list_id}" class="${list_class} unstyled"&gt;\n  &lt;s:iterator value="#reports" var="user_report"&gt;\n      &lt;s:set name="report" value="#user_report.report" /&gt;\n      &lt;s:set name="report_id" value="#report.id" /&gt;\n      \n      &lt;!-- Url --&gt;\n      &lt;s:url action="ManageReports" method="unfavorite" var="report_favorite_url"&gt;\n          &lt;s:param name="reportId"&gt;${report_id}&lt;/s:param&gt;\n      &lt;/s:url&gt;\n      \n      &lt;s:url action="Report" var="report_url"&gt;\n          &lt;s:param name="report"&gt;${report_id}&lt;/s:param&gt;\n      &lt;/s:url&gt;\n      \n      &lt;!-- Icon --&gt;\n      &lt;s:set name="is_favorite_class" value="%{\'\'}" /&gt;\n      \n      &lt;s:if test="favorite"&gt;\n          &lt;s:set name="is_favorite_class"&gt;selected&lt;/s:set&gt;\n      &lt;/s:if&gt;\n      \n      &lt;li class="report clearfix"&gt;\n          &lt;a href="${report_favorite_url}" class="favorite" data-id="${report_id}"&gt;\n              &lt;i class="icon-star icon-large ${is_favorite_class}"&gt;&lt;/i&gt;\n          &lt;/a&gt;\n      &lt;/li&gt;\n  &lt;/s:iterator&gt;\n&lt;/ul&gt;</pre></div></section></div></div>'),a.put("layout/_footer.html","<footer></footer>"),a.put("layout/_header.html",'<header ng-controller="HeaderController"><ng-include src="\'navigation/_navigation.html\'"></ng-include></header>'),a.put("navigation/_navigation.html",'<nav id="side_bar"><a href="#" class="brand"><img src="http://www.bobthebuilder.com/uk/images/parents/bob.jpg"/></a><ul class="side-nav"><li><a href="#technology">Technology</a></li><li><a href="#file-structure">File Structure</a></li><li><a href="#routing">Routing</a></li><li><a href="#decorators">Decorators</a></li><li><a href="#html">HTML</a></li><li><a href="#page-layout">Page Layout</a></li><li><a href="#style-guide">Style Guide</a></li><li class="divider"></li><li class="heading">Conventions &amp; Standards</li><li><a href="#conventions-and-standards/css-javascript">CSS &amp; Javascript</a></li><li><a href="#conventions-and-standards/html">HTML</a></li><li><a href="#conventions-and-standards/file-structure">File Structure</a></li></ul></nav>'),a.put("page-layout/page-layout.html",'<div class="row"><div class="columns"><section id="navigation"><h1>Navigation</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>The navigation component is bootstrap built and responsive.</p><div class="example"><p><strong>How the menu is included:</strong></p><pre class="prettyprint linenums">&lt;!-- /WebContent/decorators/layout.jsp --&gt;\n&lt;header&gt;\n    &lt;s:action name="Menu!menu" executeResult="true" /&gt;\n&lt;/header&gt;\n</pre><p><strong>How the menu is generated:</strong></p><pre class="prettyprint linenums"># primary navigation element\n/struts/layout/menu/_menu.jsp\n\n# drop down â€” menus & sub-menus\n/struts/layout/menu/_menu-item.jsp\n</pre><p><strong>How the menu becomes interactive:</strong></p><pre class="prettyprint linenums">/js/pics/layout/menu/menu.js\n</pre><p><strong>How the menu gets painted:</strong></p><pre class="prettyprint linenums">/sass/pics/layout/_menu.scss\n</pre></div></section><section id="environment_toolbar"><h1>Environment Toolbar</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>The environment toolbar is docked at the bottom of the screen and is responsive.  It is only available to non-stable environments.  The purpose of it is to indicate context and to provide debug information.</p><div class="example"><p><strong>How the environment toolbar is included:</strong></p><pre class="prettyprint linenums">&lt;!-- /WebContent/decorators/layout.jsp --&gt;\n&lt;footer&gt;\n    &lt;s:include value="/struts/layout/_environment.jsp" /&gt;\n&lt;/footer&gt;\n</pre><p><strong>How the toolbar gets painted:</strong></p><pre class="prettyprint linenums">/sass/pics/layout/_environment.scss\n</pre></div></section><section id="page_header"><h1>Page Header</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>This is the standard header that is to be include on every page.  The title is mandatory. The subtitle is optional.</p><div class="example"><p><strong>Header with title only:</strong></p><h1 class="title">If they say, why, why? Tell \'em that is human nature</h1><pre class="prettyprint linenums">&lt;s:include value="/struts/layout/_page-header.jsp"&gt;\n    &lt;s:param name="title"&gt;If they say, why, why? Tell \'em that is human nature&lt;/s:param&gt;\n&lt;/s:include&gt;\n</pre><p><strong>Header with title and sub-title:</strong></p><h1 class="title">Ma cherie amour, distant as the Milky Way</h1><p class="subtitle">Ma cherie amour, pretty little one that I adore</p><pre class="prettyprint linenums">&lt;s:include value="/struts/layout/_page-header.jsp"&gt;\n    &lt;s:param name="title"&gt;Ma cherie amour, distant as the Milky Way&lt;/s:param&gt;\n    &lt;s:param name="subtitle"&gt;Ma cherie amour, pretty little one that I adore&lt;/s:param&gt;\n&lt;/s:include&gt;\n</pre></div></section><section id="containers"><h1>Containers</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>Containers are a place for you to semantically structure your code consistently and elegantly. <strong>This example is not a substitute for understanding grid systems or scaffolding. It is only meant to be a preview to it.</strong></p><div class="example"><p><strong>This example was taken from <code>/struts/frontend-development-guide/style-guide/style-guide.jsp</code>:</strong></p><pre class="prettyprint linenums">&lt;s:include value="/struts/layout/_page-header.jsp"&gt;\n    &lt;s:param name="title"&gt;PICS Style Guide&lt;/s:param&gt;\n&lt;/s:include&gt;\n\n&lt;s:include value="/struts/frontend-development-guide/_menu.jsp" /&gt;\n\n&lt;div class="row"&gt;\n    &lt;div class="span3"&gt;\n        &lt;s:include value="_menu.jsp" /&gt;\n    &lt;/div&gt;\n    &lt;div class="span9"&gt;\n        &lt;s:include value="_overview.jsp" /&gt;\n        \n        &lt;s:include value="_typography.jsp" /&gt;\n        \n        &lt;s:include value="_colors.jsp" /&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</pre><p><strong>Not overly used <code>&lt;div.row&gt;</code> elements are not required. A <code>&lt;div.row&gt;</code> is only required when creating nested columns.</strong></p></div></section><section id="offsets"><h1>Offsets</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p><strong>This example is not a substitute for understanding grid systems or scaffolding. It is only meant to be a preview to it.</strong></p><div class="example"><p><strong>This example was taken from <code>/struts/report/manage-report/_favorites-list.jsp</code> with a few tweaks:</strong></p><pre class="prettyprint linenums">&lt;div class="row"&gt;\n  &lt;div class="span5 offset2"&gt;\n      &lt;div class="alert alert-info alert-block"&gt;\n          &lt;button type="button" class="close" data-dismiss="alert"&gt;Ã—&lt;/button&gt;\n          \n          &lt;h4&gt;You don\'t have any favorite reports.&lt;/h4&gt;\n          &lt;p&gt;\n              For quick access to the reports you use most, select the star icon or choose "Favorite" in the report options in My Reports.\n          &lt;/p&gt;\n      &lt;/div&gt;\n  &lt;/div&gt;</pre>&lt;/div&gt;</div></section></div></div>'),a.put("routing/routing.html",'<div class="row"><div class="columns"><section id="overview"><h1>Overview</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p><code>Routing</code> is an important subject. It determines how incoming requests are handled and processed. The <code>routing</code> process controls whether or not you get the response you want, but also provides a couple of other benefits:</p><ol><li>Single point of entry for URL management</li><li>No longer bound by hard coded URLs</li><li>Abstracts the defined URL from the path on the file system</li><li>Validation for URLs</li><li>Validation for request parameters</li></ol></section><section id="routing"><h1>Routing</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>It is important to note that incoming requests can be manipulated at different levels, from <code>DNS</code> to <code>.htaccess</code>. Struts 2 has a few different configurations on <code>Routing</code>, be sure to investigate them on your own. This guide will explain how a response is returned when a user makes a request to the application. This is a basic guide and is not meant to be comprehensive.</p><p><strong>Below is an example of someone attempting to access "https://www.picsorganizer.com/Login.action"</strong></p><div class="example"><p><strong>Step 1: Match and direct an incoming request.</strong></p><pre class="prettyprint linenums"># User requests a specified URL from his/her browser\nhttps://www.picsorganizer.com/Login.action\n\n# Catches all requests that end with .action and applies the Struts filter\nweb.xml\n\n# Forwards to URL management\nstruts.xml\n\n# Regex pattern matches to appropriate action and associates the request to a Java Class\n&lt;action name="Login" class="com.picsauditing.access.LoginController"&gt;&lt;/action&gt;\n\n# Default action handler is execute()\npublic String execute() throws Exception {}\n\n# Alternate example for https://www.picsorganizer.com/Login!logout.action\npublic String logout() throws Exception {}\n</pre><p><strong>Step 2: Build a response, including headers and content.</strong></p><pre class="prettyprint linenums"># Obtain a return String from the action method to determine the appropriate response and response headers.\n# com.opensymphony.xwork2.Action interface contains a list of provided constants\npublic String execute() throws Exception {\n    return SUCCESS;\n}\n\n# Alternate example for https://www.picsorganizer.com/Login!logout.action\npublic String logout() throws Exception {\n    return "logout";\n}\n\n# Match the constant back to struts.xml to obtain available template (if there is one)\n&lt;action name="Login" class="com.picsauditing.access.LoginController"&gt;&lt;/action&gt;\n    &lt;result&gt;/struts/user/login/login.jsp&lt;/result&gt;\n    &lt;result name="logout"&gt;/some-other-file.jsp&lt;/result&gt;\n&lt;/action&gt;\n</pre><p><strong>Step 3: Decorate response appropriately.</strong></p><pre class="prettyprint linenums"># Obtain an appropriate layout file\ndecorators.xml\n\n# Regex match the return to a layout file\n&lt;decorator name="simpleLayout" page="simple-layout.jsp"&gt;\n    &lt;pattern&gt;/Login.action&lt;/pattern&gt;\n&lt;/decorator&gt;\n\n# Apply the content returned to the layout file using SiteMesh\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;header&gt;\n        &lt;!-- TITLE REPLACEMENT --&gt;\n        &lt;decorator:title default="PICS" /&gt;\n    &lt;/header&gt;\n    &lt;body&gt;\n        &lt;!-- CONTENT REPLACEMENT --&gt;\n        &lt;decorator:body /&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre><p><strong>Step 4: Enjoy a cup of tea along with your response.</strong></p></div></section><section id="links"><h1>Links</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>It is important to utilize the <code>routing</code> capabilities to generate appropriate URLs. The power of generating URLs comes from a single point of entry for URL management. By allowing the <code>routing</code> system to generate and control our URLs it will be a rare case in which a URL would need to be hard coded. Links can then be changed in a centralized location that is not in the templates. This way the <code>routing</code> file can determine how links should be formatted and displayed.</p><p>If the homepage is <em>https://www.picsorganizer.com/</em> today, but tomorrow it is <em>https://www.picsorganizer.com/dashboard/</em>, the only thing that would have to be changed is the <code>Routing</code> file and all of the links would update appropriately.</p><div class="example"><p><strong>Generating a link to a Action</strong></p><pre class="prettyprint linenums">&lt;s:url action="Home" var="dashboard_url" /&gt;\n&lt;a href="${dashboard_url}"&gt;Go to my Dashboard&lt;/a&gt;\n</pre><p><strong>Generating a link to a Action/Method</strong></p><pre class="prettyprint linenums">&lt;s:url action="Login" method="logout" var="logout_url" /&gt;\n&lt;a href="${logout_url}"&gt;Logout&lt;/a&gt;\n</pre><p><strong>Generating a link to a Action with parameters</strong></p><pre class="prettyprint linenums">&lt;s:url action="Report" var="report_url"&gt;\n    &lt;s:param name="id"&gt;${report.id}&lt;/s:param&gt;\n&lt;/s:url&gt;\n\n&lt;form action="${report_url}" method="post"&gt;&lt;/form&gt;\n</pre><p><strong>Generating a link to an external source</strong></p><pre class="prettyprint linenums">&lt;a href="//www.twitter.com/chemoish"&gt;@chemoish&lt;/a&gt;\n\n\n</pre></div></section></div></div>'),a.put("style-guide/style-guide.html",'<div class="row"><div class="columns"><section id="overview"><h1>Overview</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>The PICS brand is more than just a name.  It\'s a set of values, attributes and artwork that reflects the spirit of our company.  USing it consistently will reinforce our strategic positioning and build brand recognition.</p></section><section id="typography"><h1>Typography</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><p>When producing materials for the web, PICS takes in consideration the different browsers and operating systems.</p><p>To maintain a branded and recognizable look, we must use our recommended web safe fonts that are widely available and always declare a fail-safe system font.</p><p>For main titles and copy we use <code>"Franklin Gothic Medium Condensed"</code></p><p>For print and web body copy we use <code>"Helvetica Regular"</code></p></section><section id="overview"><h1>Overview</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><div class="example"><p><strong>However, the font-family used by default is the same as Twitter Bootstrap (listed below):</strong></p><pre class="prettyprint linenums">font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;\n</pre><span class="uppercase">abcdefghijklmnopqrstuvwxyz</span><span class="lowercase">abcdefghijklmnopqrstuvwxyz</span></div></section><section id="colors"><h1>Colors</h1><div data-alert="data-alert" class="alert-box info radius"><strong>BETA</strong> This section is currently under development.</div><ul class="unstyled colors"><li><a href="https://alpha.picsorganizer.com/FrontendDevelopmentGuide!style_guide.action#" title="PICS Blue" class="pics-blue">PICS Blue</a></li><li><a href="https://alpha.picsorganizer.com/FrontendDevelopmentGuide!style_guide.action#" title="Burnt Orange" class="burnt-orange">Burnt Orange</a></li><li><a href="https://alpha.picsorganizer.com/FrontendDevelopmentGuide!style_guide.action#" title="LHT Blue" class="light-blue">LHT Blue</a></li><li><a href="https://alpha.picsorganizer.com/FrontendDevelopmentGuide!style_guide.action#" title="Warm Grey" class="warm-grey">Warm Grey</a></li><li><a href="https://alpha.picsorganizer.com/FrontendDevelopmentGuide!style_guide.action#" title="Cool Grey" class="cool-grey">Cool Grey</a></li><table class="table table-striped"><tbody><tr><th>Color</th><th>Pantone</th><th>CMYK</th><th>RGB</th><th>Hex</th></tr><tr><td>PICS Blue</td><td>Pantone Black 6 C 85%</td><td>C85 M30 Y0 K85</td><td>R0 G36 B35</td><td>#002441</td></tr><tr><td>Burnt Orange</td><td>174 C</td><td>C0 M70 Y100 K36</td><td>R168 G77 B16</td><td>#a84d10</td></tr><tr><td>LHT Blue</td><td>299 C 60%</td><td>C51 M11 Y0 K0</td><td>R115 G187 B232</td><td>#73bbe8</td></tr><tr><td>Warm Grey</td><td>Process Black 60%</td><td>C0 M0 Y0 K60</td><td>R128 G130 B133</td><td>#808285</td></tr><tr><td>Cool Grey</td><td>Process Black 5%</td><td>C0 M0 Y0 K5</td><td>R241 G241 B242</td><td>#f1f1f2</td></tr></tbody></table></ul></section></div></div>'),a.put("technology/technology.html",'<div class="row"><div class="columns"><ul><li>Struts 2</li><li>HTML5Boilerplate</li><li>Twitter Bootstrap</li><li>Font Awesome</li><li>jQuery</li><li>ExtJS</li><li>Modrnizer</li><li>Compass / SASS</li><li>Grunt</li><li>Grunt Compass</li><li>Grunt Recess</li><li>Simple Watch</li></ul></div></div>')
}]);